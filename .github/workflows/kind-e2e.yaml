name: KinD e2e tests

on:
  push:
    branches: [ 'main', 'release-*' ]
  pull_request:
    branches: [ 'main', 'release-*' ]

jobs:
  ko-resolve:
    name: e2e tests
    runs-on: ubuntu-latest
    env:
      GOPATH: ${{ github.workspace }}
      GO111MODULE: off
      KO_DOCKER_REPO: registry:5000
      CAMEL_K_REGISTRY: registry:5000
      CAMEL_K_REGISTRY_INSECURE: true
      SYSTEM_NAMESPACE: knative-eventing

    steps:
      - name: Cleanup Host
        run: |
          ls -lart
          echo "Initial status:"
          df -h

          echo "Cleaning up resources:"
          sudo swapoff -a
          sudo rm -f /swapfile
          sudo apt clean
          docker rmi $(docker image ls -aq)

          echo "Final status:"
          df -h
      - name: Set up Go 1.14.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.14.x

      - name: Install Dependencies
        run: |
          GO111MODULE=on go get github.com/google/ko/cmd/ko@master
      - name: Install Camel K Client
        env:
          CAMEL_K_VERSION: 1.2.0
        run: |
          curl -Lo ./kamel.tar.gz https://github.com/apache/camel-k/releases/download/v${CAMEL_K_VERSION}/camel-k-client-${CAMEL_K_VERSION}-linux-64bit.tar.gz
          tar -xzf kamel.tar.gz
          sudo mv kamel /usr/local/bin
      - name: Check out code onto GOPATH
        uses: actions/checkout@v2
        with:
          path: ./src/knative.dev/${{ github.event.repository.name }}

      - name: Install KinD
        working-directory: ./src/knative.dev/${{ github.event.repository.name }}
        env:
          KIND_VERSION: v0.8.1
        run: |
          set -x
          curl -Lo ./kind https://github.com/kubernetes-sigs/kind/releases/download/${KIND_VERSION}/kind-$(uname)-amd64
          chmod +x ./kind
          sudo mv kind /usr/local/bin
      - name: Create Local Registry
        run: |
          docker run -d -p "5000:5000" --restart=always --name "registry" registry:2
          echo "127.0.0.1 registry" | sudo tee --append /etc/hosts

      - name: Create KinD Cluster
        working-directory: ./src/knative.dev/${{ github.event.repository.name }}
        env:
          NODE_IMAGE: 'kindest/node:v1.16.9@sha256:7175872357bc85847ec4b1aba46ed1d12fa054c83ac7a8a11f5c268957fd5765'
        run: |
          set -x
          # KinD configuration.
          cat > kind.yaml <<EOF
          apiVersion: kind.x-k8s.io/v1alpha4
          kind: Cluster
          nodes:
          - role: control-plane
            image: ${NODE_IMAGE}
          - role: worker
            image: ${NODE_IMAGE}
          containerdConfigPatches:
          - |-
            [plugins."io.containerd.grpc.v1.cri".registry.mirrors."registry:5000"]
              endpoint = ["http://registry:5000"]
          EOF
          # Create a cluster!
          kind create cluster --config kind.yaml

          docker network connect "kind" "registry"
          for node in $(kind get nodes --name kind); do
            docker exec "${node}" sh -c "echo $(docker inspect --format '{{.NetworkSettings.IPAddress }}' "registry") registry >> /etc/hosts"
          done

      - name: Install Camel K on KinD
        run: |
          kubectl create namespace camel-system
          kamel install --registry registry:5000 --registry-insecure --global -n camel-system
      - name: Install Knative
        env:
          SERVING_VERSION: v0.18.0
          KOURIER_VERSION: v0.18.0
          EVENTING_VERSION: v0.18.0
        run: |
          # Prerequisites
          sudo pip install yq

          # Serving
          kubectl apply --filename https://github.com/knative/serving/releases/download/$SERVING_VERSION/serving-crds.yaml
          sleep 5
          curl -L -s https://github.com/knative/serving/releases/download/$SERVING_VERSION/serving-core.yaml | yq 'del(.spec.template.spec.containers[]?.resources)' -y | yq 'del(.metadata.annotations."knative.dev/example-checksum")' -y | kubectl apply -f -
          sleep 60
          kubectl get pod -n knative-serving

          # Kourier
          kubectl apply --filename https://github.com/knative-sandbox/net-kourier/releases/download/$KOURIER_VERSION/kourier.yaml
          kubectl patch configmap/config-network \
          --namespace knative-serving \
          --type merge \
          --patch '{"data":{"ingress.class":"kourier.ingress.networking.knative.dev"}}'
          sleep 30
          kubectl get pod -n kourier-system

          # Eventing
          kubectl apply --filename https://github.com/knative/eventing/releases/download/$EVENTING_VERSION/eventing-crds.yaml
          sleep 5
          curl -L -s https://github.com/knative/eventing/releases/download/$EVENTING_VERSION/eventing-core.yaml | yq 'del(.spec.template.spec.containers[]?.resources)' -y | yq 'del(.metadata.annotations."knative.dev/example-checksum")' -y | kubectl apply -f -
          # Eventing channels
          curl -L -s https://github.com/knative/eventing/releases/download/$EVENTING_VERSION/in-memory-channel.yaml | yq 'del(.spec.template.spec.containers[]?.resources)' -y | yq 'del(.metadata.annotations."knative.dev/example-checksum")' -y | kubectl apply -f -
          # Eventing broker
          curl -L -s https://github.com/knative/eventing/releases/download/$EVENTING_VERSION/mt-channel-broker.yaml | yq 'del(.spec.template.spec.containers[]?.resources)' -y | yq 'del(.metadata.annotations."knative.dev/example-checksum")' -y | kubectl apply -f -
          sleep 30
          kubectl get pod -n knative-eventing

          kubectl get pod --all-namespaces

      - name: Install Test Images
        working-directory: ./src/knative.dev/${{ github.event.repository.name }}
        run: |
          ./test/upload-test-images.sh vendor/knative.dev/eventing/test/test_images/recordevents/

      - name: Install Camel Sources
        working-directory: ./src/knative.dev/${{ github.event.repository.name }}
        run: |
          ko apply --insecure-registry -f config/
          sleep 60
          kubectl get pod -n knative-sources

      - name: Run e2e Tests
        working-directory: ./src/knative.dev/${{ github.event.repository.name }}
        run: |
          set -x
          # Run the tests tagged as e2e on the KinD cluster.
          go test -v -race -count=1 -timeout=15m -tags=e2e ./test/e2e/...
      - name: Gather Failure Data
        if: ${{ failure() }}
        run: |
          set -x
          echo "===================== CamelSources ============================="
          kubectl get camelsource --all-namespaces=true -oyaml
          sleep 1
          echo "===================== Integrations ============================="
          kubectl get integration --all-namespaces=true -oyaml
          sleep 1
          echo "===================== Integration Platforms ============================="
          kubectl get integrationplatform --all-namespaces=true -oyaml
          sleep 1
          echo "===================== Integration Kits ====================="
          kubectl get integrationkit --all-namespaces=true -oyaml
          sleep 1
          echo "===================== K8s Events ==========================="
          kubectl get events --all-namespaces=true -oyaml
          sleep 1
          echo "===================== Pod Logs ============================="
          namespaces=( knative-eventing camel-system )
          for namespace in "${namespaces[@]}"; do
            for pod in $(kubectl get pod -n $namespace | grep Running | awk '{print $1}'); do
              for container in $(kubectl get pod "${pod}" -n $namespace -ojsonpath='{.spec.containers[*].name}'); do
                echo "Namespace, Pod, Container: ${namespace}, ${pod}, ${container}"
                kubectl logs -n $namespace "${pod}" -c "${container}" || true
                echo "----------------------------------------------------------"
                echo "Namespace, Pod, Container (Previous instance): ${namespace}, ${pod}, ${container}"
                kubectl logs -p -n $namespace "${pod}" -c "${container}" || true
                echo "============================================================"
                sleep 1
              done
            done
          done
